name: Validate Build Test Package Deploy to Azure
# This workflow Validates the incoming build, builds with Test Cases , creates a jar, builds the docker images and pushes to ACR, deploys to Container Apps.

on:
  push:
    branches: ["deploy", "feature/SUB-1169*"]

env:
  artifact_extension: jar
permissions:
  id-token: write
  contents: read

jobs:
  get_main_version:
    runs-on: ubuntu-latest
    outputs:
      ver: ${{steps.step1.outputs.info}}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
          path: temp_main

      - id: step1
        run: |
          cd temp_main
          echo "info="$(mvn org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.version -q -DforceStdout)"" >> "$GITHUB_OUTPUT"

  validate_version:
    needs: get_main_version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - id: getCurrVersion
        run: |
          echo "currver="$(mvn org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.version -q -DforceStdout)"" >> "$GITHUB_OUTPUT"
          echo working in ${{github.ref}}

      #- Design the logic and Develop the code - to discuss
      - id: validateVersion
        run: |
          chmod +x .github/scripts/validate_version.sh     
          echo "${{needs.get_main_version.outputs.ver}}  \n ${{steps.getCurrVersion.outputs.currver}}"
          echo "info="$(./.github/scripts/validate_version.sh  ${{needs.get_main_version.outputs.ver}} ${{steps.getCurrVersion.outputs.currver}})"" >> "$GITHUB_OUTPUT"
          #echo "info=true" >> "$GITHUB_OUTPUT"

      - name: StopOrContinue
        if: ${{steps.validateVersion.outputs.info == 'false' }}
        uses: actions/github-script@v7.0.1
        with:
          script: |
            core.setFailed('Please update the project version in pom as per the guidelines')
  
  

  build_withTestCases:
    needs: validate_version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        env:
          GH_TOKEN: ${{ github.token }}
      - name: Set up JDK 1.8
        uses: actions/setup-java@v4
        with:
          java-version: ' 8.0'
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven
        run: |
          cp .github/config/maven_settings.xml ~/.m2/settings.xml
          mvn -B clean test --file pom.xml -U   -Djfrog.username=${{secrets._JFROG_USERNAME}} -Djfrog.password=${{secrets._JFROG_PASSWORD}}

  build_package_deploy:
    needs: build_withTestCases
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        env:
          GH_TOKEN: ${{ github.token }}
      - name: Set up JDK 1.8
        uses: actions/setup-java@v4
        with:
          java-version: ' 8.0'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: |
          cp .github/config/maven_settings.xml ~/.m2/settings.xml
          mvn -B clean package --file pom.xml  -DskipTests -U  -Djfrog.username=${{secrets._JFROG_USERNAME}} -Djfrog.password=${{secrets._JFROG_PASSWORD}}
          mkdir staging && cp target/*.$artifact_extension staging

      - uses: actions/upload-artifact@v4
        with:
          name: Package
          path: staging

      - name: 'Build and Push Docker Image'
        uses: azure/docker-login@v2  # https://github.com/Azure/docker-login
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - run: |
          docker build . -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/assetmanager:latest     
          docker images
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/assetmanager:latest


      - name: Azure login
        uses: azure/login@v2  #oidc
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      #- name: 'Deploy to Azure Container Instances'
      #  uses: 'azure/aci-deploy@v1'
      #  with:
      #      resource-group: ${{ secrets.RESOURCE_GROUP }}
      #      dns-name-label: ${{ secrets.RESOURCE_GROUP }}${{ github.run_number }}
      #      image: ${{ secrets.REGISTRY_LOGIN_SERVER }}/assetmanager:latest
      #      registry-login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
      #      registry-username: ${{ secrets.REGISTRY_USERNAME }}
      #      registry-password: ${{ secrets.REGISTRY_PASSWORD }}
      #      name: aci-assetmanager
      #      location: 'east us'

      - name: Deploy Container App
        uses: azure/container-apps-deploy-action@v1
        with:
          appSourcePath: ${{ github.workspace }}
          acrName: acrscombackendassetmgr
          acrUsername: ${{ secrets.REGISTRY_USERNAME }}
          acrPassword: ${{ secrets.REGISTRY_PASSWORD }}
          imageToDeploy:  ${{ secrets.REGISTRY_LOGIN_SERVER }}/assetmanager:latest
          containerAppEnvironment: acp-env-assetmanager
          containerAppName: acp-assetmanager
          resourceGroup: ${{ secrets.RESOURCE_GROUP }}
          #disableTelemetry: true # default is false

          # - name: Deploy to Tomcat
          #   run: |
          #     pwd
          #curl -v -u  ${{ secrets.TOMCAT_USER }}:${{ secrets.TOMCAT_PASSWORD }} -T target/*.war "http://${{ secrets.TOMCAT_HOST }}/manager/text/deploy?path=/ROOT_12&update=true"

          # - name: Deploy to Tomact with Maven
          #   run: |
          #     pwd
          # mvn  -Djfrog.username=${{secrets._JFROG_USERNAME}} -Djfrog.password=${{secrets._JFROG_PASSWORD}} -Dtomcat.username=${{secrets.TOMCAT_USER}}  -Dtomcat.password=${{secrets.TOMCAT_PASSWORD}} tomcat7:redeploy-only -f pom.xml
